// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'post.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

Post _$PostFromJson(Map<String, dynamic> json) => Post(
      id: json['id'] as int,
      name: json['name'] as String?,
      username: json['username'] as String,
      avatarTemplate: json['avatar_template'] as String,
      createdAt: json['created_at'] as String,
      cooked: json['cooked'] as String,
      postNumber: json['post_number'] as int,
      postType: json['post_type'] as int,
      updatedAt: json['updated_at'] as String,
      replyCount: json['reply_count'] as int,
      replyToPostNumber: json['reply_to_post_number'],
      quoteCount: json['quote_count'] as int,
      incomingLinkCount: json['incoming_link_count'] as int,
      reads: json['reads'] as int,
      readersCount: json['readers_count'] as int,
      score: (json['score'] as num).toDouble(),
      yours: json['yours'] as bool,
      topicId: json['topic_id'] as int,
      topicSlug: json['topic_slug'] as String,
      displayUsername: json['display_username'] as String,
      primaryGroupName: json['primary_group_name'] as String?,
      flairName: json['flair_name'] as String?,
      flairUrl: json['flair_url'] as String?,
      flairBgColor: json['flair_bg_color'] as String?,
      flairColor: json['flair_color'] as String?,
      flairGroupId: json['flair_group_id'] as int?,
      version: json['version'] as int,
      canEdit: json['can_edit'] as bool,
      canDelete: json['can_delete'] as bool,
      canRecover: json['can_recover'] as bool,
      canSeeHiddenPost: json['can_see_hidden_post'] as bool,
      canWiki: json['can_wiki'] as bool,
      userTitle: json['user_title'] as String?,
      bookmarked: json['bookmarked'] as bool,
      raw: json['raw'] as String,
      actionsSummary: json['actions_summary'] as List<dynamic>,
      moderator: json['moderator'] as bool,
      admin: json['admin'] as bool,
      staff: json['staff'] as bool,
      userId: json['user_id'] as int,
      hidden: json['hidden'] as bool,
      trustLevel: json['trust_level'] as int,
      deletedAt: json['deleted_at'],
      userDeleted: json['user_deleted'] as bool,
      editReason: json['edit_reason'],
      canViewEditHistory: json['can_view_edit_history'] as bool,
      wiki: json['wiki'] as bool,
      reviewableId: json['reviewable_id'],
      reviewableScoreCount: json['reviewable_score_count'] as int?,
      reviewableScorePendingCount: json['reviewable_score_pending_count'] as int?,
      mentionedUsers: json['mentioned_users'] as List<dynamic>,
      event: json['event'],
      calendarDetails: json['calendar_details'] as List<dynamic>,
      categoryExpertApprovedGroup: json['category_expert_approved_group'],
      needsCategoryExpertApproval: json['needs_category_expert_approval'],
      canManageCategoryExpertPosts: json['can_manage_category_expert_posts'] as bool,
      userNftVerified: json['user_nft_verified'],
      ratings: json['ratings'] as List<dynamic>,
      reactions: json['reactions'] as List<dynamic>,
      currentUserReaction: json['current_user_reaction'],
      reactionUsersCount: json['reaction_users_count'] as int,
      currentUserUsedMainReaction: json['current_user_used_main_reaction'] as bool,
      canAcceptAnswer: json['can_accept_answer'] as bool,
      canUnacceptAnswer: json['can_unaccept_answer'] as bool,
      acceptedAnswer: json['accepted_answer'] as bool,
      topicAcceptedAnswer: json['topic_accepted_answer'] as bool,
    );

Map<String, dynamic> _$PostToJson(Post instance) => <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'username': instance.username,
      'avatar_template': instance.avatarTemplate,
      'created_at': instance.createdAt,
      'cooked': instance.cooked,
      'post_number': instance.postNumber,
      'post_type': instance.postType,
      'updated_at': instance.updatedAt,
      'reply_count': instance.replyCount,
      'reply_to_post_number': instance.replyToPostNumber,
      'quote_count': instance.quoteCount,
      'incoming_link_count': instance.incomingLinkCount,
      'reads': instance.reads,
      'readers_count': instance.readersCount,
      'score': instance.score,
      'yours': instance.yours,
      'topic_id': instance.topicId,
      'topic_slug': instance.topicSlug,
      'display_username': instance.displayUsername,
      'primary_group_name': instance.primaryGroupName,
      'flair_name': instance.flairName,
      'flair_url': instance.flairUrl,
      'flair_bg_color': instance.flairBgColor,
      'flair_color': instance.flairColor,
      'flair_group_id': instance.flairGroupId,
      'version': instance.version,
      'can_edit': instance.canEdit,
      'can_delete': instance.canDelete,
      'can_recover': instance.canRecover,
      'can_see_hidden_post': instance.canSeeHiddenPost,
      'can_wiki': instance.canWiki,
      'user_title': instance.userTitle,
      'bookmarked': instance.bookmarked,
      'raw': instance.raw,
      'actions_summary': instance.actionsSummary,
      'moderator': instance.moderator,
      'admin': instance.admin,
      'staff': instance.staff,
      'user_id': instance.userId,
      'hidden': instance.hidden,
      'trust_level': instance.trustLevel,
      'deleted_at': instance.deletedAt,
      'user_deleted': instance.userDeleted,
      'edit_reason': instance.editReason,
      'can_view_edit_history': instance.canViewEditHistory,
      'wiki': instance.wiki,
      'reviewable_id': instance.reviewableId,
      'reviewable_score_count': instance.reviewableScoreCount,
      'reviewable_score_pending_count': instance.reviewableScorePendingCount,
      'mentioned_users': instance.mentionedUsers,
      'event': instance.event,
      'calendar_details': instance.calendarDetails,
      'category_expert_approved_group': instance.categoryExpertApprovedGroup,
      'needs_category_expert_approval': instance.needsCategoryExpertApproval,
      'can_manage_category_expert_posts': instance.canManageCategoryExpertPosts,
      'user_nft_verified': instance.userNftVerified,
      'ratings': instance.ratings,
      'reactions': instance.reactions,
      'current_user_reaction': instance.currentUserReaction,
      'reaction_users_count': instance.reactionUsersCount,
      'current_user_used_main_reaction': instance.currentUserUsedMainReaction,
      'can_accept_answer': instance.canAcceptAnswer,
      'can_unaccept_answer': instance.canUnacceptAnswer,
      'accepted_answer': instance.acceptedAnswer,
      'topic_accepted_answer': instance.topicAcceptedAnswer,
    };
